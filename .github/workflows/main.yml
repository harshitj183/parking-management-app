name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
        
    - name: Cache npm packages
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      # Only fail on errors, not warnings
      run: npx eslint --max-warnings=999 .
      
    - name: Check for syntax errors
      run: |
        # Check each JS file individually
        find . -name "*.js" -not -path "./node_modules/*" | while read file; do
          echo "Checking $file"
          node --check "$file" || exit 1
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        
    - name: Install dependencies
      run: npm ci
    
    - name: Deploy to production
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        NODE_ENV: production
      run: |
        echo "Ready for deployment"